# app/models/agenda.py
from app.models import db

class Agenda(db.Model):
    __tablename__ = 'agenda'
    
    id                = db.Column(db.Integer, primary_key=True)
    sunday_date       = db.Column(db.Date, nullable=False, unique=True)
    director_id       = db.Column(db.Integer, db.ForeignKey('bishopric.id'), nullable=False)
    presider_id       = db.Column(db.Integer, db.ForeignKey('bishopric.id'), nullable=False)
    opening_prayer    = db.Column(db.String(100), nullable=True)
    closing_prayer    = db.Column(db.String(100), nullable=True)
    meeting_center_id = db.Column(db.Integer, db.ForeignKey('meeting_center.id'), nullable=False)

    director  = db.relationship('Bishopric', foreign_keys=[director_id])
    presider  = db.relationship('Bishopric', foreign_keys=[presider_id])

    # Relación con selected_hymns usando sunday_date como clave foránea
    hymns         = db.relationship( 'SelectedHymns', back_populates='sacrament_meeting', cascade="all, delete-orphan", foreign_keys='[SelectedHymns.sunday_date]')
    speakers      = db.relationship('Speaker', backref='meeting', primaryjoin="Agenda.sunday_date == Speaker.sunday_date")
    prayers       = db.relationship('Prayer', backref='sacrament_meeting_prayers', lazy=True, foreign_keys='[Prayer.sacrament_meeting_id]')
    announcements = db.relationship('WardAnnouncements', backref='sacrament_meeting_announcements', cascade="all, delete")

    __table_args__ = (
        db.UniqueConstraint('meeting_center_id', 'sunday_date', name='uq_sacrament_meeting_unique'),
    )

# app/models/prayers.py
from app.models import db

class Prayer(db.Model):
    id                    = db.Column(db.Integer, primary_key=True)
    member_id             = db.Column(db.Integer, db.ForeignKey('member.id'), nullable=False)
    sacrament_meeting_id  = db.Column(db.Integer, db.ForeignKey('agenda.id'), nullable=False)  
    type                  = db.Column(db.Enum('Opening', 'Closing'), nullable=False)

    member                = db.relationship('Member', backref='prayers')
    sacrament_meeting     = db.relationship('Agenda', backref='prayers_for_meeting')

    __table_args__ = (
        db.UniqueConstraint('member_id', 'sacrament_meeting_id', 'type', name='uq_prayer_unique'),
    )

# app/models/speakers.py
from app.models import db

class Speaker(db.Model):
    __tablename__ = 'speaker'


    id                = db.Column(db.Integer, primary_key=True)
    sunday_date       = db.Column(db.Date, db.ForeignKey('agenda.sunday_date'), nullable=False)
    member_id         = db.Column(db.Integer, db.ForeignKey('member.id'), nullable=False)
    topic             = db.Column(db.String(200), nullable=False)
    meeting_center_id = db.Column(db.Integer, db.ForeignKey('meeting_center.id'), nullable=False)

    agenda         = db.relationship('Agenda', backref='speakers_list')
    member         = db.relationship('Member', backref='speakers_list')
    meeting_center = db.relationship('MeetingCenter', backref='speakers_list')

    __table_args__ = (
        db.UniqueConstraint('member_id', 'sunday_date', 'meeting_center_id', name='uq_speaker_unique'),
    )

# app/models/ward_announcements.py
from app.models import db

class WardAnnouncements(db.Model):
    __tablename__ = 'ward_announcements'
    id                = db.Column(db.Integer, primary_key=True)
    agenda_id         = db.Column(db.Integer, db.ForeignKey('agenda.id'), nullable=False)
    announcement_text = db.Column(db.String(500), nullable=True)
    
    agenda     = db.relationship('Agenda', backref='ward_announcements')  # Cambiar backref aquí

    __table_args__ = (
        db.UniqueConstraint('agenda_id', 'announcement_text', name='uq_ward_announcement_unique'),
    )

# app/models/members.py
from datetime import date
from app.models import db

class Member(db.Model):
    id                = db.Column(db.Integer, primary_key=True)
    full_name         = db.Column(db.String(255), nullable=False)
    preferred_name    = db.Column(db.String(100))
    short_name        = db.Column(db.String(50))
    birth_date        = db.Column(db.Date)
    gender            = db.Column(db.String(1), nullable=False)  # 'M' o 'F'
    marital_status    = db.Column(db.String(20))
    priesthood        = db.Column(db.String(50))
    priesthood_office = db.Column(db.String(50))
    address           = db.Column(db.String(255))
    city              = db.Column(db.String(100))
    state            = db.Column(db.String(50))
    zip_code          = db.Column(db.String(15))
    sector           = db.Column(db.String(50))
    lat              = db.Column(db.Float)
    lon              = db.Column(db.Float)
    fixed_address    = db.Column(db.String(100))
    excluded         = db.Column(db.Boolean, default=False)
    new              = db.Column(db.Boolean, default=False)
    calling          = db.Column(db.String(100))
    arrival_date     = db.Column(db.Date)
    moved_out        = db.Column(db.Boolean, default=False)
    active           = db.Column(db.Boolean, default=True)
    family_head      = db.Column(db.String(100))
    meeting_center_id = db.Column(db.Integer, db.ForeignKey('meeting_center.id'), nullable=False)

    meeting_center   = db.relationship('MeetingCenter', backref='members_list')

    #speakers        = db.relationship('Speaker', backref='member', lazy=True)

    # Constructor personalizado para calcular los nombres
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self._calculate_names()
        self._format_fields()

    def _calculate_names(self):
        """Método para calcular preferred_name y short_name solo si están vacíos"""
        if self.full_name:
            if not self.preferred_name:  # Solo calcula si preferred_name está vacío
                name_parts          = self.full_name.split(',')
                last_name           = name_parts[0].strip().split()[0]
                first_name          = name_parts[1].strip().split()[0]
                self.preferred_name = f"{first_name} {last_name}"

            if not self.short_name:  # Solo calcula si short_name está vacío
                name_parts      = self.full_name.split(',')
                last_name       = name_parts[0].strip().split()[0]
                first_name      = name_parts[1].strip().split()[0]
                self.short_name = f"{last_name}, {first_name}"

    def _format_fields(self):
        """Método para formatear address, city y state a título"""
        if self.address:
            self.address = self.address.title() or ""
        if self.city:
            self.city = self.city.title() or ""
        if self.state:
            self.state = self.state.title() or ""

    def age(self):
        if self.birth_date:
            today = date.today()
            return today.year - self.birth_date.year - ((today.month, today.day) < (self.birth_date.month, self.birth_date.day))
        return None

# app/models/meeting_center.py
from sqlalchemy.orm    import validates
from sqlalchemy.exc    import IntegrityError
from flask_babel       import _
from app.models        import db


#=======================================================================
class MeetingCenter(db.Model):
    __tablename__ = 'meeting_center'

    id                 = db.Column(db.Integer, primary_key=True)
    unit_number        = db.Column(db.Integer, unique=True, nullable=False)
    name               = db.Column(db.String(50), nullable=False)
    short_name         = db.Column(db.String(20), nullable=False)
    city               = db.Column(db.String(50), nullable=True)
    start_time         = db.Column(db.Time, nullable=True)
    end_time           = db.Column(db.Time, nullable=True)
    is_restricted      = db.Column(db.Boolean, default=False)
    grace_period_hours = db.Column(db.Integer, nullable=True, default=0)
    attendances        = db.relationship('Attendance', backref=db.backref('meeting_center', lazy=True), cascade="all, delete-orphan")
    users              = db.relationship('User', backref=db.backref('meeting_center', lazy=True), cascade="all, delete-orphan")
    classes            = db.relationship('Classes', backref=db.backref('meeting_center', lazy=True), cascade="all, delete-orphan")
    members = db.relationship('Member', backref=db.backref('meeting_center_ref', lazy=True), cascade="all, delete-orphan",     overlaps="meeting_center_ref"
)
    agenda = db.relationship('Agenda', backref=db.backref('meeting_center', lazy=True), cascade="all, delete-orphan")

    @validates('attendances')
    def validate_no_attendance(self, key, value):
        if self.attendances:
            raise IntegrityError(_('Cannot delete a church unit with registered attendance.'), params={}, statement=None)
        return value

    def delete(self):
        if self.attendances:
            raise ValueError(_('Cannot delete a church unit with registered attendance.'))
        db.session.delete(self)


